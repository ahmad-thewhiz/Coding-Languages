#include <iostream>
#include <limits>

using namespace std;

int main() {
    // Integer types
    char c;                        // 1 byte, -128 to 127 or 0 to 255
    unsigned char uc;              // 1 byte, 0 to 255
    short s;                       // 2 bytes, -32,768 to 32,767
    unsigned short us;             // 2 bytes, 0 to 65,535
    int i;                         // 4 bytes, -2,147,483,648 to 2,147,483,647
    unsigned int ui;               // 4 bytes, 0 to 4,294,967,295
    long l;                        // 4 bytes, -2,147,483,648 to 2,147,483,647
    unsigned long ul;              // 4 bytes, 0 to 4,294,967,295
    long long ll;                  // 8 bytes, -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
    unsigned long long ull;        // 8 bytes, 0 to 18,446,744,073,709,551,615

    // Floating-point types
    float f;                       // 4 bytes, approximately ±1.18E-38 to ±3.4E+38
    double d;                      // 8 bytes, approximately ±2.23E-308 to ±1.8E+308
    long double ld;                // 8 bytes or more, approximately ±2.23E-308 to ±1.8E+308

    // Boolean type
    bool b;                        // 1 byte, true or false

    // Character types
    char ch;                       // 1 byte, approximately: -128 to 127
    char16_t c16;                  // 2 bytes, at least 16 bits wide
    char32_t c32;                  // 4 bytes, at least 32 bits wide
    wchar_t wc;                    // 2 bytes or more, implementation-defined width

    // Other types
    void* ptr;                     // pointer to void

    // Output the sizes and limits
    cout << "Sizes and Limits:" << endl;
    cout << "char: " << sizeof(char) << " bytes, " << numeric_limits<char>::min() << " to " << numeric_limits<char>::max() << endl;
    cout << "unsigned char: " << sizeof(unsigned char) << " bytes, 0 to " << numeric_limits<unsigned char>::max() << endl;
    cout << "short: " << sizeof(short) << " bytes, " << numeric_limits<short>::min() << " to " << numeric_limits<short>::max() << endl;
    cout << "unsigned short: " << sizeof(unsigned short) << " bytes, 0 to " << numeric_limits<unsigned short>::max() << endl;
    cout << "int: " << sizeof(int) << " bytes, " << numeric_limits<int>::min() << " to " << numeric_limits<int>::max() << endl;
    cout << "unsigned int: " << sizeof(unsigned int) << " bytes, 0 to " << numeric_limits<unsigned int>::max() << endl;
    cout << "long: " << sizeof(long) << " bytes, " << numeric_limits<long>::min() << " to " << numeric_limits<long>::max() << endl;
    cout << "unsigned long: " << sizeof(unsigned long) << " bytes, 0 to " << numeric_limits<unsigned long>::max() << endl;
    cout << "long long: " << sizeof(long long) << " bytes, " << numeric_limits<long long>::min() << " to " << numeric_limits<long long>::max() << endl;
    cout << "unsigned long long: " << sizeof(unsigned long long) << " bytes, 0 to " << numeric_limits<unsigned long long>::max() << endl;
    cout << "float: " << sizeof(float) << " bytes, " << numeric_limits<float>::lowest() << " to " << numeric_limits<float>::max() << endl;
    cout << "double: " << sizeof(double) << " bytes, " << numeric_limits<double>::lowest() << " to " << numeric_limits<double>::max() << endl;
    cout << "long double: " << sizeof(long double) << " bytes, " << numeric_limits<long double>::lowest() << " to " << numeric_limits<long double>::max() << endl;
    cout << "bool: " << sizeof(bool) << " byte, " << boolalpha << true << " to " << false << endl;
    cout << "char: " << sizeof(char) << " bytes, " << numeric_limits<char>::min() << " to " << numeric_limits<char>::max() << endl;
    cout << "char16_t: " << sizeof(char16_t) << " bytes, " << numeric_limits<char16_t>::min() << " to " << numeric_limits<char16_t>::max() << endl;
    cout << "char32_t: " << sizeof(char32_t) << " bytes, " << numeric_limits<char32_t>::min() << " to " << numeric_limits<char32_t>::max() << endl;
    cout << "wchar_t: " << sizeof(wchar_t) << " bytes or more, implementation-defined" << endl;
    cout << "void*: " << sizeof(void*) << " bytes" << endl;

    return 0;
}
